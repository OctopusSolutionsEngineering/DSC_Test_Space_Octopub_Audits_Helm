step "create-namespace-if-not-exists" {
    name = "Create namespace if not exists"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Octopub.Helm.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                                            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "Project.Worker.Pool"
    }
}

step "deploy-octopub-audits-chart" {
    name = "Deploy Octopub Audits chart"
    properties = {
        Octopus.Action.TargetRoles = "octopub"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "helm"
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "#{Octopub.Helm.Cluster.Namespace}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.TemplateValuesSources = <<-EOT
                [
                  {
                    "Type": "InlineYaml",
                    "Value": "database:\n  hostname: #{Octopub.Helm.Database.Server.Name}\n  port: 3306\n  username: #{Octopub.Helm.Database.Server.User}\n  password: #{Octopub.Helm.Database.Server.Password}\n  name: #{Octopub.Helm.Database.Name}\n  migrateOnStartup: false\n\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations: {\n     }\n  hosts:\n    - host: #{Octopub.Helm.Host.Name}\n      paths:\n        - path: /api/audits\n          pathType: Prefix\n        \nservice:\n  type: ClusterIP\n  port: 10000\n  \nimage:\n  repository: #{Octopus.Action.Package[octopub-audit-microservice-mysql].PackageId}\n  tag: #{Octopus.Action.Package[octopub-audit-microservice-mysql].PackageVersion}  "
                  }
                ]
                                            EOT
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "octopub-audit-microservice-mysql" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "octopussamples/octopub-audit-microservice-mysql"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
                ValuesFilePath = ""
            }
        }
    }
}